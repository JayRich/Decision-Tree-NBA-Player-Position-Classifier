# -*- coding: utf-8 -*-
"""DecisionTree.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pOa6OGD1AkLcVwtIq1r-VSGLiB86mjGf
"""

"""
Jason Richardson
"""

!wget -O 2018-2019_NBA_Stats.csv https://uta.instructure.com/courses/61673/files/10505095/preview?verifier=1qoqyIxNj5MjnRrfNGQsUpWHAQs0TDZiyDLfTKps
import io
import pandas as pd
from sklearn import preprocessing
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.metrics import classification_report
import graphviz
from IPython.display import display
from sklearn.tree import export_graphviz


#Read from the csv file and return a Pandas DataFrame.
stats_file = '/content/2018-2019_NBA_Stats.csv'
nba = pd.read_csv(io.FileIO(stats_file))
class_column = 'Position'

feature_columns = ['Points Per Game', 'Total Rebounds Per Game',\
                   'Assists Per Game', 'Three Points Made Per Game',\
                   'Steals Per Game', 'Blocks Per Game', 'Turnovers Per Game']

#Pandas DataFrame allows you to select columns. 
#We use column selection to split the data into features and class. 
nba_feature = nba[feature_columns]
nba_class = nba[class_column]

train_feature, test_feature, train_class, test_class = \
    train_test_split(nba_feature, nba_class, stratify=nba_class, random_state=0)

#Create a decision tree Classifier
model = DecisionTreeClassifier(max_depth=4, random_state=0)
# Train the model using the training sets
#model.fit(test_feature,test_class)
model.fit(train_feature,train_class)

#print(test_class)
#print(test_feature)
scores = cross_val_score(model, nba_feature, nba_class, cv=5)
print("Cross-validation scores: {}".format(scores))
print("Average cross-validation score: {:.2f}".format(scores.mean()))
print()
print("Test set accuracy: {:.2f}".format(model.score(test_feature, test_class)))
print()
prediction = model.predict(test_feature)
print("Test set predictions:\n{}".format(prediction))
print()
print("Confusion matrix:")
print(pd.crosstab(test_class, prediction, rownames=['True'], colnames=['Predicted'], margins=True))
print()
print("Classification report:")
print(classification_report(test_class, prediction))

export_graphviz(model, out_file="model.dot", class_names=["Points Per Game", "Total Rebounds Per Game", "Assists Per Game", "Three Points Made Per Game", "Steals Per Game", "Blocks Per Game", "Turnovers Per Game"],
                feature_names=feature_columns, impurity=False, filled=True)

with open("./model.dot") as f:
    dot_graph = f.read()

display(graphviz.Source(dot_graph))